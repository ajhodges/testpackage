apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'

sourceCompatibility = 1.6
targetCompatibility = 1.6

dependencies {
    compile group: 'org.twdata.maven', name: 'mojo-executor', version: '2.2.0'
    compile group: 'org.apache.maven', name: 'maven-plugin-api', version: '2.0'
    compile group: 'org.apache.maven.plugin-tools', name: 'maven-plugin-annotations', version: '3.2'
    compile group: 'org.codehaus.plexus', name: 'plexus-utils', version: '3.0.13'
}

task pluginDescriptor(type: Exec, dependsOn: compileJava) {
    // http://www.gradle.org/docs/current/dsl/org.gradle.api.tasks.Exec.html

    final mvn = project.hasProperty('mvn') ? project.mvn : System.getProperty('os.name')?.toLowerCase()?.contains('win') ? 'mvn.bat' : 'mvn'
    final mvnArgs = project.hasProperty('mvnArgs') ? project.mvnArgs : ''
    final File pom = project.file("$buildDir/pom.xml")
    final allArgs = ['-e', '-B', '-f', pom.canonicalPath, mvnArgs, 'org.apache.maven.plugins:maven-plugin-plugin:3.2:descriptor'].grep()

    executable mvn
    args allArgs

    doFirst {
        assert project.compileJava.destinationDir.directory
        install.repositories.mavenInstaller.pom.writeTo(pom)
        assert pom.file, "[$pom.canonicalPath] was not generated"
        println "POM is generated at file:$pom.canonicalPath"

        pom.text = pom.text.
                replace('<groupId>unknown</groupId>', "<groupId>${project.group}</groupId>").
                replace('<artifactId>empty-project</artifactId>', "<artifactId>${project.name}</artifactId>").
                replace('<version>0</version>', """
                                                                   |<version>${version}</version>
                                                                   |  <packaging>maven-plugin</packaging>
                                                                   |  <build>
                                                                   |    <directory>${project.buildDir.canonicalPath}</directory>
                                                                   |    <outputDirectory>${
                    project.compileJava.destinationDir.canonicalPath
                }</outputDirectory>
                                                                   |  </build>""".stripMargin().trim())

        println "Running '$mvn' with arguments $allArgs"
    }
    doLast {
        final pluginDescriptor = new File((File) project.compileJava.destinationDir, 'META-INF/maven/plugin.xml')
        assert pluginDescriptor.file, "[$pluginDescriptor.canonicalPath] was not created"
        println "Plugin descriptor file:$pluginDescriptor.canonicalPath is created"
    }
}

project.jar.dependsOn(pluginDescriptor)